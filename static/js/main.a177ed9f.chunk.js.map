{"version":3,"sources":["components/Card.js","components/Footer.js","components/Header.js","components/Loader.js","hooks/useStats.js","components/Stats.js","App.js","serviceWorker.js","index.js"],"names":["BACKGROUND_COLORS","success","warning","info","danger","COLORS","dark","getStyle","variant","backgroundColor","color","Card","title","count","total","percent","toFixed","className","style","toLocaleString","Footer","href","Header","Loader","useStats","url","useState","stats","setStats","loading","setLoading","error","setError","useEffect","a","fetch","then","res","json","catch","err","data","fetchData","Stats","confirmed","value","recovered","deaths","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"2LAEMA,EAAoB,CACxBC,QAAS,UACTC,QAAS,UACTC,KAAM,UAENC,OAAQ,WAGJC,EAAS,CACbJ,QAAS,UACTC,QAAS,UACTC,KAAM,UACNC,OAAQ,UACRE,KAAM,WAGFC,EAAW,SAAAC,GACf,OAAOA,EACH,CACEC,gBAAiBT,EAAkBQ,IAAY,UAC/CE,MAAOL,EAAOG,IAAYH,EAAOC,MAEnC,IAkBSK,MAff,YAAiD,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,MAAON,EAAW,EAAXA,QAC7BO,GAAYF,EAAQC,EAAS,KAAKE,QAAQ,GAEhD,OACE,yBAAKC,UAAU,OAAOC,MAAOX,EAASC,IACpC,wBAAIS,UAAU,cAAcL,GAE5B,yBAAKK,UAAU,aACb,wBAAIA,UAAU,SAASJ,EAAMM,kBAC7B,wBAAIF,UAAU,SAAd,UAA0BF,EAA1B,SCrBOK,MAbf,WACE,OACE,gCACE,2CAEE,uBAAGC,KAAK,mCAAR,sCCKOC,MAVf,WACE,OACE,gCACE,6BACE,mDCDOC,MAHf,WACE,OAAO,yBAAKN,UAAU,a,8BC0BTO,MA3Bf,SAAkBC,GAAM,IAAD,EACKC,qBADL,mBACdC,EADc,KACPC,EADO,OAESF,qBAFT,mBAEdG,EAFc,KAELC,EAFK,OAGKJ,qBAHL,mBAGdK,EAHc,KAGPC,EAHO,KAoBrB,OAfAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,6DACEJ,GAAW,GACXE,IAFF,SAGqBG,MAAMV,GACtBW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GACLR,EAASQ,MANf,OAGQC,EAHR,OAQEb,EAASa,GACTX,GAAW,GATb,4CADc,uBAAC,WAAD,wBAYdY,KACC,CAACjB,IAEG,CACLE,QACAE,UACAE,UCiBWY,MApCf,YAAmE,IAAlD/B,EAAiD,EAAjDA,MAAiD,IAA1Ca,IAA0C,EAC9BD,OAD8B,MAApC,iCAAoC,GACxDG,EADwD,EACxDA,MAAOI,EADiD,EACjDA,MAAOF,EAD0C,EAC1CA,QAEtB,OACE,yBAAKZ,UAAU,mBACb,wBAAIA,UAAU,eAAeL,GAE5BmB,EAAQ,4BAAKA,GAAc,KAC3BF,EAAU,kBAAC,EAAD,MAAa,KAEvBF,EACC,oCACE,yBAAKV,UAAU,aACb,+CACA,4BAAKU,EAAMiB,UAAUC,MAAM1B,mBAE7B,yBAAKF,UAAU,kBACb,kBAAC,EAAD,CACEL,MAAM,YACNC,MAAOc,EAAMmB,UAAUD,MACvB/B,MAAOa,EAAMiB,UAAUC,MACvBrC,QAAQ,YAEV,kBAAC,EAAD,CACEI,MAAM,QACNC,MAAOc,EAAMoB,OAAOF,MACpB/B,MAAOa,EAAMiB,UAAUC,MACvBrC,QAAQ,aAIZ,O,MClBKwC,MAbf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,yBAAK/B,UAAU,aACb,kBAAC,EAAD,CAAOL,MAAM,WACb,kBAAC,EAAD,CAAOA,MAAM,QAAQa,IAAI,iDAE3B,kBAAC,EAAD,QCFcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdvB,OAAM,SAAAR,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.a177ed9f.chunk.js","sourcesContent":["import React from 'react';\n\nconst BACKGROUND_COLORS = {\n  success: '#28a745',\n  warning: '#ffc107',\n  info: '#17a2b8',\n  // danger: '#dc3545'\n  danger: '#282f36'\n};\n\nconst COLORS = {\n  success: '#ffffff',\n  warning: '#ffffff',\n  info: '#ffffff',\n  danger: '#ffffff',\n  dark: '#282f36'\n};\n\nconst getStyle = variant => {\n  return variant\n    ? {\n        backgroundColor: BACKGROUND_COLORS[variant] || '#f6f6f6',\n        color: COLORS[variant] || COLORS.dark\n      }\n    : {};\n};\n\nfunction Card({ title, count, total, variant }) {\n  const percent = ((count / total) * 100).toFixed(2);\n\n  return (\n    <div className=\"card\" style={getStyle(variant)}>\n      <h3 className=\"card-title\">{title}</h3>\n\n      <div className=\"card-info\">\n        <h2 className=\"count\">{count.toLocaleString()}</h2>\n        <h2 className=\"count\">{`${percent}%`}</h2>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\n\nfunction Footer() {\n  return (\n    <footer>\n      <h6>\n        Data Source: \n        <a href=\"https://covid19.mathdro.id/api.\">\n          https://covid19.mathdro.id/api.\n        </a>\n      </h6>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\n\nfunction Header() {\n  return (\n    <header>\n      <div>\n        <h3>Covid-19 Tracker</h3>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction Loader() {\n  return <div className=\"spinner\"></div>;\n}\nexport default Loader;\n","import { useState, useEffect } from 'react';\n\nfunction useStats(url) {\n  const [stats, setStats] = useState();\n  const [loading, setLoading] = useState();\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      setError();\n      const data = await fetch(url)\n        .then(res => res.json())\n        .catch(err => {\n          setError(err);\n        });\n      setStats(data);\n      setLoading(false);\n    }\n    fetchData();\n  }, [url]);\n\n  return {\n    stats,\n    loading,\n    error\n  };\n}\n\nexport default useStats;\n","import React from 'react';\n\nimport Card from './Card';\nimport Loader from './Loader';\nimport useStats from '../hooks/useStats';\n\nfunction Stats({ title, url = 'https://covid19.mathdro.id/api' }) {\n  const { stats, error, loading } = useStats(url);\n\n  return (\n    <div className=\"stats-container\">\n      <h2 className=\"stats-title\">{title}</h2>\n\n      {error ? <h3>{error}</h3> : null}\n      {loading ? <Loader /> : null}\n\n      {stats ? (\n        <>\n          <div className=\"confirmed\">\n            <h5>Total Confirmed</h5>\n            <h3>{stats.confirmed.value.toLocaleString()}</h3>\n          </div>\n          <div className=\"card-container\">\n            <Card\n              title=\"Recovered\"\n              count={stats.recovered.value}\n              total={stats.confirmed.value}\n              variant=\"success\"\n            />\n            <Card\n              title=\"Death\"\n              count={stats.deaths.value}\n              total={stats.confirmed.value}\n              variant=\"danger\"\n            />\n          </div>\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nexport default Stats;\n","import React from 'react';\n\nimport { Stats, Header, Footer } from './components';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <Stats title=\"Global\" />\n        <Stats title=\"India\" url='https://covid19.mathdro.id/api/countries/IN'/>\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}