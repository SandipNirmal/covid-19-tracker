{"version":3,"sources":["components/Card.js","components/Footer.js","components/Header.js","components/Loader.js","hooks/useStats.js","components/Stats.js","utils/countries.js","components/CountrySelector.js","App.js","serviceWorker.js","index.js"],"names":["BACKGROUND_COLORS","success","warning","info","danger","COLORS","dark","getStyle","variant","backgroundColor","color","Card","title","count","total","percent","toFixed","className","style","toLocaleString","Footer","href","Header","Loader","useStats","url","useState","stats","setStats","loading","setLoading","error","setError","useEffect","a","fetch","then","res","json","catch","err","data","fetchData","Stats","confirmed","value","recovered","deaths","ISO3CountryCodes","AFG","ALA","ALB","DZA","ASM","AND","AGO","AIA","ATA","ATG","ARG","ARM","ABW","AUS","AUT","AZE","BHS","BHR","BGD","BRB","BLR","BEL","BLZ","BEN","BMU","BTN","BOL","BES","BIH","BWA","BVT","BRA","IOT","VGB","BRN","BGR","BFA","BDI","KHM","CMR","CAN","CPV","CYM","CAF","TCD","CHL","CHN","CXR","CCK","COL","COM","COK","CRI","HRV","CUB","CUW","CYP","CZE","COD","DNK","DJI","DMA","DOM","TLS","ECU","EGY","SLV","GNQ","ERI","EST","ETH","FLK","FRO","FJI","FIN","FRA","GUF","PYF","ATF","GAB","GMB","GEO","DEU","GHA","GIB","GRC","GRL","GRD","GLP","GUM","GTM","GGY","GNB","GIN","GUY","HTI","HMD","HND","HKG","HUN","ISL","IND","IDN","IRN","IRQ","IRL","IMN","ISR","ITA","CIV","JAM","JPN","JEY","JOR","KAZ","KEN","KIR","XKX","KWT","KGZ","LAO","LVA","LBN","LSO","LBR","LBY","LIE","LTU","LUX","MAC","MKD","MDG","MWI","MYS","MDV","MLI","MLT","MHL","MTQ","MRT","MUS","MYT","MEX","FSM","MDA","MCO","MNG","MNE","MSR","MAR","MOZ","MMR","NAM","NRU","NPL","NLD","NCL","NZL","NIC","NER","NGA","NIU","NFK","PRK","MNP","NOR","OMN","PAK","PLW","PSE","PAN","PNG","PRY","PER","PHL","PCN","POL","PRT","PRI","QAT","COG","REU","ROU","RUS","RWA","BLM","SHN","KNA","LCA","MAF","SPM","VCT","WSM","SMR","STP","SAU","SEN","SRB","SYC","SLE","SGP","SXM","SVK","SVN","SLB","SOM","ZAF","SGS","KOR","SSD","ESP","LKA","SDN","SUR","SJM","SWZ","SWE","CHE","SYR","TWN","TJK","TZA","THA","TGO","TKL","TON","TTO","TUN","TUR","TKM","TCA","TUV","VIR","UGA","UKR","ARE","GBR","UMI","URY","USA","UZB","VUT","VAT","VEN","VNM","WLF","ESH","YEM","ZMB","ZWE","CountrySelector","selectedCountryCode","setSelectedCountryCode","onChange","e","target","Object","entries","map","code","country","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.640461ba.chunk.js","sourcesContent":["import React from 'react';\n\nconst BACKGROUND_COLORS = {\n  success: '#28a745',\n  warning: '#ffc107',\n  info: '#17a2b8',\n  // danger: '#dc3545'\n  danger: '#282f36'\n};\n\nconst COLORS = {\n  success: '#ffffff',\n  warning: '#ffffff',\n  info: '#ffffff',\n  danger: '#ffffff',\n  dark: '#282f36'\n};\n\nconst getStyle = variant => {\n  return variant\n    ? {\n        backgroundColor: BACKGROUND_COLORS[variant] || '#f6f6f6',\n        color: COLORS[variant] || COLORS.dark\n      }\n    : {};\n};\n\nfunction Card({ title, count, total, variant }) {\n  const percent = total ? ((count / total) * 100).toFixed(2) : 0;\n\n  return (\n    <div className=\"card\" style={getStyle(variant)}>\n      <h3 className=\"card-title\">{title}</h3>\n\n      <div className=\"card-info\">\n        <h2 className=\"count\">{count.toLocaleString()}</h2>\n        <h2 className=\"count\">{`${percent}%`}</h2>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\n\nfunction Footer() {\n  return (\n    <footer>\n      <h6>\n        Data Source: \n        <a href=\"https://covid19.mathdro.id/api.\">\n          https://covid19.mathdro.id/api.\n        </a>\n      </h6>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\n\nfunction Header() {\n  return (\n    <header>\n      <div>\n        <h3>COVID-19 Tracker</h3>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction Loader() {\n  return <div className=\"spinner\"></div>;\n}\nexport default Loader;\n","import { useState, useEffect } from 'react';\n\nfunction useStats(url) {\n  const [stats, setStats] = useState();\n  const [loading, setLoading] = useState();\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      setError();\n      const data = await fetch(url)\n        .then(res => res.json())\n        .catch(err => {\n          setError(err);\n        });\n      setStats(data);\n      setLoading(false);\n    }\n    fetchData();\n  }, [url]);\n\n  return {\n    stats,\n    loading,\n    error\n  };\n}\n\nexport default useStats;\n","import React from 'react';\n\nimport Card from './Card';\nimport Loader from './Loader';\nimport useStats from '../hooks/useStats';\n\nfunction Stats({ title, url = 'https://covid19.mathdro.id/api' }) {\n  const { stats, error, loading } = useStats(url);\n\n  return (\n    <div className=\"stats-container\">\n      <h2 className=\"stats-title\">{title}</h2>\n\n      {error ? <h3>{error}</h3> : null}\n      {loading ? <Loader /> : null}\n\n      {stats && !loading ? (\n        <>\n          <div className=\"confirmed\">\n            <h5>Total Confirmed</h5>\n            <h3>{stats.error ? 0 : stats.confirmed.value.toLocaleString()}</h3>\n          </div>\n          <div className=\"card-container\">\n            <Card\n              title=\"Recovered\"\n              count={stats.error ? 0 : stats.recovered.value}\n              total={stats.error ? 0 : stats.confirmed.value}\n              variant=\"success\"\n            />\n            <Card\n              title=\"Death\"\n              count={stats.error ? 0 : stats.deaths.value}\n              total={stats.error ? 0 : stats.confirmed.value}\n              variant=\"danger\"\n            />\n          </div>\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nexport default Stats;\n","export const ISO3CountryCodes = {\n  AFG: 'Afghanistan',\n  ALA: 'Aland Islands',\n  ALB: 'Albania',\n  DZA: 'Algeria',\n  ASM: 'American Samoa',\n  AND: 'Andorra',\n  AGO: 'Angola',\n  AIA: 'Anguilla',\n  ATA: 'Antarctica',\n  ATG: 'Antigua and Barbuda',\n  ARG: 'Argentina',\n  ARM: 'Armenia',\n  ABW: 'Aruba',\n  AUS: 'Australia',\n  AUT: 'Austria',\n  AZE: 'Azerbaijan',\n  BHS: 'Bahamas',\n  BHR: 'Bahrain',\n  BGD: 'Bangladesh',\n  BRB: 'Barbados',\n  BLR: 'Belarus',\n  BEL: 'Belgium',\n  BLZ: 'Belize',\n  BEN: 'Benin',\n  BMU: 'Bermuda',\n  BTN: 'Bhutan',\n  BOL: 'Bolivia',\n  BES: 'Bonaire, Saint Eustatius and Saba ',\n  BIH: 'Bosnia and Herzegovina',\n  BWA: 'Botswana',\n  BVT: 'Bouvet Island',\n  BRA: 'Brazil',\n  IOT: 'British Indian Ocean Territory',\n  VGB: 'British Virgin Islands',\n  BRN: 'Brunei',\n  BGR: 'Bulgaria',\n  BFA: 'Burkina Faso',\n  BDI: 'Burundi',\n  KHM: 'Cambodia',\n  CMR: 'Cameroon',\n  CAN: 'Canada',\n  CPV: 'Cape Verde',\n  CYM: 'Cayman Islands',\n  CAF: 'Central African Republic',\n  TCD: 'Chad',\n  CHL: 'Chile',\n  CHN: 'China',\n  CXR: 'Christmas Island',\n  CCK: 'Cocos Islands',\n  COL: 'Colombia',\n  COM: 'Comoros',\n  COK: 'Cook Islands',\n  CRI: 'Costa Rica',\n  HRV: 'Croatia',\n  CUB: 'Cuba',\n  CUW: 'Curacao',\n  CYP: 'Cyprus',\n  CZE: 'Czech Republic',\n  COD: 'Democratic Republic of the Congo',\n  DNK: 'Denmark',\n  DJI: 'Djibouti',\n  DMA: 'Dominica',\n  DOM: 'Dominican Republic',\n  TLS: 'East Timor',\n  ECU: 'Ecuador',\n  EGY: 'Egypt',\n  SLV: 'El Salvador',\n  GNQ: 'Equatorial Guinea',\n  ERI: 'Eritrea',\n  EST: 'Estonia',\n  ETH: 'Ethiopia',\n  FLK: 'Falkland Islands',\n  FRO: 'Faroe Islands',\n  FJI: 'Fiji',\n  FIN: 'Finland',\n  FRA: 'France',\n  GUF: 'French Guiana',\n  PYF: 'French Polynesia',\n  ATF: 'French Southern Territories',\n  GAB: 'Gabon',\n  GMB: 'Gambia',\n  GEO: 'Georgia',\n  DEU: 'Germany',\n  GHA: 'Ghana',\n  GIB: 'Gibraltar',\n  GRC: 'Greece',\n  GRL: 'Greenland',\n  GRD: 'Grenada',\n  GLP: 'Guadeloupe',\n  GUM: 'Guam',\n  GTM: 'Guatemala',\n  GGY: 'Guernsey',\n  GNB: 'Guinea-Bissau',\n  GIN: 'Guinea',\n  GUY: 'Guyana',\n  HTI: 'Haiti',\n  HMD: 'Heard Island and McDonald Islands',\n  HND: 'Honduras',\n  HKG: 'Hong Kong',\n  HUN: 'Hungary',\n  ISL: 'Iceland',\n  IND: 'India',\n  IDN: 'Indonesia',\n  IRN: 'Iran',\n  IRQ: 'Iraq',\n  IRL: 'Ireland',\n  IMN: 'Isle of Man',\n  ISR: 'Israel',\n  ITA: 'Italy',\n  CIV: 'Ivory Coast',\n  JAM: 'Jamaica',\n  JPN: 'Japan',\n  JEY: 'Jersey',\n  JOR: 'Jordan',\n  KAZ: 'Kazakhstan',\n  KEN: 'Kenya',\n  KIR: 'Kiribati',\n  XKX: 'Kosovo',\n  KWT: 'Kuwait',\n  KGZ: 'Kyrgyzstan',\n  LAO: 'Laos',\n  LVA: 'Latvia',\n  LBN: 'Lebanon',\n  LSO: 'Lesotho',\n  LBR: 'Liberia',\n  LBY: 'Libya',\n  LIE: 'Liechtenstein',\n  LTU: 'Lithuania',\n  LUX: 'Luxembourg',\n  MAC: 'Macao',\n  MKD: 'Macedonia',\n  MDG: 'Madagascar',\n  MWI: 'Malawi',\n  MYS: 'Malaysia',\n  MDV: 'Maldives',\n  MLI: 'Mali',\n  MLT: 'Malta',\n  MHL: 'Marshall Islands',\n  MTQ: 'Martinique',\n  MRT: 'Mauritania',\n  MUS: 'Mauritius',\n  MYT: 'Mayotte',\n  MEX: 'Mexico',\n  FSM: 'Micronesia',\n  MDA: 'Moldova',\n  MCO: 'Monaco',\n  MNG: 'Mongolia',\n  MNE: 'Montenegro',\n  MSR: 'Montserrat',\n  MAR: 'Morocco',\n  MOZ: 'Mozambique',\n  MMR: 'Myanmar',\n  NAM: 'Namibia',\n  NRU: 'Nauru',\n  NPL: 'Nepal',\n  NLD: 'Netherlands',\n  NCL: 'New Caledonia',\n  NZL: 'New Zealand',\n  NIC: 'Nicaragua',\n  NER: 'Niger',\n  NGA: 'Nigeria',\n  NIU: 'Niue',\n  NFK: 'Norfolk Island',\n  PRK: 'North Korea',\n  MNP: 'Northern Mariana Islands',\n  NOR: 'Norway',\n  OMN: 'Oman',\n  PAK: 'Pakistan',\n  PLW: 'Palau',\n  PSE: 'Palestinian Territory',\n  PAN: 'Panama',\n  PNG: 'Papua New Guinea',\n  PRY: 'Paraguay',\n  PER: 'Peru',\n  PHL: 'Philippines',\n  PCN: 'Pitcairn',\n  POL: 'Poland',\n  PRT: 'Portugal',\n  PRI: 'Puerto Rico',\n  QAT: 'Qatar',\n  COG: 'Republic of the Congo',\n  REU: 'Reunion',\n  ROU: 'Romania',\n  RUS: 'Russia',\n  RWA: 'Rwanda',\n  BLM: 'Saint Barthelemy',\n  SHN: 'Saint Helena',\n  KNA: 'Saint Kitts and Nevis',\n  LCA: 'Saint Lucia',\n  MAF: 'Saint Martin',\n  SPM: 'Saint Pierre and Miquelon',\n  VCT: 'Saint Vincent and the Grenadines',\n  WSM: 'Samoa',\n  SMR: 'San Marino',\n  STP: 'Sao Tome and Principe',\n  SAU: 'Saudi Arabia',\n  SEN: 'Senegal',\n  SRB: 'Serbia',\n  SYC: 'Seychelles',\n  SLE: 'Sierra Leone',\n  SGP: 'Singapore',\n  SXM: 'Sint Maarten',\n  SVK: 'Slovakia',\n  SVN: 'Slovenia',\n  SLB: 'Solomon Islands',\n  SOM: 'Somalia',\n  ZAF: 'South Africa',\n  SGS: 'South Georgia and the South Sandwich Islands',\n  KOR: 'South Korea',\n  SSD: 'South Sudan',\n  ESP: 'Spain',\n  LKA: 'Sri Lanka',\n  SDN: 'Sudan',\n  SUR: 'Suriname',\n  SJM: 'Svalbard and Jan Mayen',\n  SWZ: 'Swaziland',\n  SWE: 'Sweden',\n  CHE: 'Switzerland',\n  SYR: 'Syria',\n  TWN: 'Taiwan',\n  TJK: 'Tajikistan',\n  TZA: 'Tanzania',\n  THA: 'Thailand',\n  TGO: 'Togo',\n  TKL: 'Tokelau',\n  TON: 'Tonga',\n  TTO: 'Trinidad and Tobago',\n  TUN: 'Tunisia',\n  TUR: 'Turkey',\n  TKM: 'Turkmenistan',\n  TCA: 'Turks and Caicos Islands',\n  TUV: 'Tuvalu',\n  VIR: 'U.S. Virgin Islands',\n  UGA: 'Uganda',\n  UKR: 'Ukraine',\n  ARE: 'United Arab Emirates',\n  GBR: 'United Kingdom',\n  UMI: 'United States Minor Outlying Islands',\n  URY: 'Uruguay',\n  USA: 'US',\n  UZB: 'Uzbekistan',\n  VUT: 'Vanuatu',\n  VAT: 'Vatican',\n  VEN: 'Venezuela',\n  VNM: 'Vietnam',\n  WLF: 'Wallis and Futuna',\n  ESH: 'Western Sahara',\n  YEM: 'Yemen',\n  ZMB: 'Zambia',\n  ZWE: 'Zimbabwe'\n};\n","import React, { useState } from 'react';\n\nimport Stats from './Stats';\nimport { ISO3CountryCodes } from '../utils/countries';\n\nfunction CountrySelector() {\n  const [selectedCountryCode, setSelectedCountryCode] = useState('');\n\n  return (\n    <>\n      <div className=\"selector\">\n        <select\n          onChange={e => {\n            setSelectedCountryCode(e.target.value);\n          }}\n        >\n          <option value=\"\">Select Country</option>\n          {Object.entries(ISO3CountryCodes).map(([code, country]) => (\n            <option key={code} value={code}>\n              {country}\n            </option>\n          ))}\n        </select>\n      </div>\n      {selectedCountryCode ? (\n        <Stats\n          title={ISO3CountryCodes[selectedCountryCode]}\n          url={`https://covid19.mathdro.id/api/countries/${selectedCountryCode}`}\n        ></Stats>\n      ) : null}\n    </>\n  );\n}\n\nexport default CountrySelector;\n","import React from 'react';\n\nimport { Stats, Header, Footer, CountrySelector } from './components';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <Stats title=\"Global\" />\n        <CountrySelector />\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}